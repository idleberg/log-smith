#!/usr/bin/env node

const program = require('commander');
const Promise = require('bluebird');
const fs = require('fs');
const path = require('path');
const request = require('request');

const meta = require('../package.json');
const options = {
    headers: {
        'User-Agent': `${meta.name} v${meta.version}`
    }
};

program
.version(meta.version)
.usage('[options]')
.option('-o, --owner [owner]', 'specify repository owner')
.option('-r, --repo [repository]', 'specify repository name')
.option('-t, --token [token]', 'specify personal access token')
.option('-L, --nolink', 'Skip link to release version')
.parse(process.argv);

if (typeof program.owner === 'undefined' || typeof program.repo === 'undefined') {
    getLocalPackage(function(data) {
        program.owner = data[1];
        program.repo = data[2];
        logRelease();
    });
} else if (program.owner === true || program.repo === true) {
    program.help();
} else {
    logRelease();
}

function getLocalPackage(callback) {
    const packagePath = path.join(process.cwd(), 'package.json');

    fs.access(packagePath, fs.constants.R_OK | fs.constants.F_OK, (err) => {
        if (err) {
            program.help();
        }

        const packageManifest = require(packagePath);
        if (packageManifest.hasOwnProperty('repository')) {
            let pattern, repository, result; 

            if (packageManifest.repository.hasOwnProperty('url')) {
                repository = packageManifest.repository.url;
                pattern = /github\.com\/([\w-]+)\/([\w-]+)/;
            } else {
                repository = packageManifest.repository;
                pattern = /^([\w-]+)\/([\w-]+)$/;
            }

            result = repository.match(pattern);

            if (result === null) {
                program.help();
                callback(null);
            }

            callback(result);
        }
    });
}

// Kudos http://stackoverflow.com/questions/42695180/how-to-iterate-request-calls-and-store-results-in-on-object/42697039#42697039
function logRelease() {
    Promise.coroutine(doRequest)()
    .then(result => {
        result.forEach(function(element) {
            if (!element.tag_name.startsWith('v')) {
                element.tag_name = 'v' + element.tag_name;
            }
            if (program.nolink == true) {
                console.log(`# ${element.tag_name}\n`);
            } else {
                console.log(`# ${element.tag_name} [#](${element.html_url})\n`);
            }
            console.log(`${element.body.trim()}\n`);
        });
    });
}

function promisifyRequest(currentPage) {
    let url = `https://api.github.com/repos/${program.owner}/${program.repo}/releases?page=${currentPage}&per_page=30`;
    if (typeof program.token === 'string') url += `&access_token=${program.token}`;

    return new Promise((resolve, reject) => {
        request(url, options, (err, res, content) => {
            if (res.statusCode !== 200) {
                return reject(res.statusCode);
            }
            resolve(JSON.parse(content));
        });
    });
}

function * doRequest() {
    const result = [];
    let currentPage = 1;
    //Might run until gets a empty array.
    while (true) {
        let data = yield promisifyRequest(currentPage);
        if (!data.length) break;
        //Appends the results of the current page to the total result.
        result.splice(result.length, 0, ...data);
        currentPage = currentPage + 1;
    }

    return result;
}
